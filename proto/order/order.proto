syntax = "proto3";

package order;
option go_package = "proto/order";

import "google/protobuf/timestamp.proto";

// Модели для Order Service
message OrderItem {
  string id = 1;
  string order_id = 2;
  string product_id = 3;
  int32 quantity = 4;
  double price = 5;
  optional ProductInfo product = 6;
}

message ProductInfo {
  string id = 1;
  string name = 2;
  double price = 3;
  int32 stock = 4;
}

message Order {
  string id = 1;
  string user_id = 2;
  double total_price = 3;
  string status = 4;
  google.protobuf.Timestamp created_at = 5;
  repeated OrderItem items = 6;
}

// Запрос на создание заказа
message CreateOrderRequest {
  string user_id = 1;
  repeated CreateOrderItem items = 2;
}

message CreateOrderItem {
  string product_id = 1;
  int32 quantity = 2;
}

message CreateOrderResponse {
  string order_id = 1;
}

// Запрос на получение заказа
message GetOrderRequest {
  string id = 1;
}

message GetOrderResponse {
  Order order = 1;
}

// Обновление статуса заказа
message UpdateOrderStatusRequest {
  string id = 1;
  string status = 2;
}

message UpdateOrderStatusResponse {
  bool success = 1;
}

// Получение заказов пользователя
message GetUserOrdersRequest {
  string user_id = 1;
}

message GetUserOrdersResponse {
  repeated Order orders = 1;
}

// Получение всех заказов
message GetAllOrdersRequest {}

message GetAllOrdersResponse {
  repeated Order orders = 1;
}

// Определение сервиса
service OrderService {
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse);
  rpc GetOrder(GetOrderRequest) returns (GetOrderResponse);
  rpc UpdateOrderStatus(UpdateOrderStatusRequest) returns (UpdateOrderStatusResponse);
  rpc GetUserOrders(GetUserOrdersRequest) returns (GetUserOrdersResponse);
  rpc GetAllOrders(GetAllOrdersRequest) returns (GetAllOrdersResponse);
}